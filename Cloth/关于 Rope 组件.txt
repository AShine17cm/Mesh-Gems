/* 关于rope 组件  2023-4-4 */
最开始使用了以前制作独立游戏的一个 拖拽铁球的代码，想着只要细调一下，就能做布料、头发的摆动效果
敲了一天的代码，发现完全不对，无法产生那种惯性摆动效果。

只好又从头分析了。

做了一些简单的受力平衡分析，最后的计算过程如下
1. 力（主要是重力，实际要看你传递的矢量值）产生的切向加速度
2. 合成速度，前一帧的运动+力产生的切向速度
3. 阻尼（阻尼单位是: 牛顿x秒/米）  没有完全搞懂这个系数，不过在加权了 位移差/时间差（米/秒）之后，效果是OK的
4. 线性约束，就是两个点的距离 产生的约束
5. 总体上就是一个 在时间上的进行 差分/微分 分析计算，然后又在 时间线上积分/帧的累积更新效果 的过程

其它方面
1. 弯曲约束  通过2个Curve曲线约束每个节点的最大转动角
1.1 第一个曲线 相对于初始的轴向进行约束，（有利于保持初始形态 ？）
1.2 另一个曲线 相对于前一个轴（父节点-父节点的父节点）进行约束 （实际上是 差分/导数 的约束 ?）
1.3 两个转动约束配合，可以产生很好的扭曲效果，同时不会使线条僵硬

2. 平行约束  两个 rope之间的相互约束，布料的模拟 用的是Rope阵列 + 平行约束
2.1 是一个单独的类 <ClothConstrain> , 在 Rope之前演算，演算结果是一个矢量，作用于<等位点>上
2.2 第一约束 是面积，计算上下两层节点构成的<四边形面积>的变化率，保证这个四边形的面积相对于初始面积不会有太大的变化
2.3 第二约束 是点距，两个平行Rope 等位点的距离的变化率
2.4 你可以重写这个类


3. 物理约束  就是通过物理引擎，防止穿插。
3.1 这个要求比较低，检测到碰撞后，修正位置，然后让这个点产生一个假的受力平衡，持续1秒钟
3.2 有布尔开关，控制是否开启物理检测
3.3 自定义的形体约束  目前只定义了球体，有需求可以自定义其它的，继承IConstrainGeo接口 即可 (没测试过)


4. 更新频率，最大帧率(100)限制，每个逻辑帧最多更新一次，不会追帧
5. 瞬移  在Hub中检测瞬移，并修正Rope中的数据，Rope日常更新 不会检测瞬移

Tail 相对 Rope 多了一个应力平衡的概念
适合于保持形状，做尾巴

总结
1.参数不多，简单调了几个预制体 放在工程里
2.单根Rope的效果很好，参数可以随便调整。
3.对布料的模拟是 Rope 的阵列，需要限制一下Rope的自由度，如果你需要较大的扭曲范围，可能需要增加节点数量
4.测试样本中用了6个节点

/* 2023-4-10 */

